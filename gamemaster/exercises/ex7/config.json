{
    "name": "Dangling References",
    "exercise": "7",
    "difficulty": "hard", 
    "topics": [
        "References"
    ],
    "task": "Fix this dangling reference and make the compiler happy!",
    "story": "In languages with pointers, itâ€™s easy to erroneously create a dangling pointer--a pointer that references a location in memory that may have been given to someone else--by freeing some memory while preserving a pointer to that memory. In Rust, by contrast, the compiler guarantees that references will never be dangling references: if you have a reference to some data, the compiler will ensure that the data will not go out of scope before the reference to the data does.",
    "hints": [
        "Hint 1: Because s is created inside dangle, when the code of dangle is finished, s will be deallocated. But we tried to return a reference to it. That means this reference would be pointing to an invalid String.",
    ]
}


